class Solution {
    public int minSubArrayLen(int target, int[] nums) {
        int left =0, right =0 , sumofcurrentwindow = 0;
        int res = Integer.MAX_VALUE;
        
        for(right = 0;right<nums.length;right++)
        {
            sumofcurrentwindow = sumofcurrentwindow + nums[right];
               while(sumofcurrentwindow >= target)
               {
                    res = Math.min(res, right-left+1);
                    sumofcurrentwindow = sumofcurrentwindow - nums[left];
                    left++;
               }
        }
        return (res==Integer.MAX_VALUE ? 0: res);
    }
}

Time complexity: O(n).

You may be thinking: there is an inner while loop inside another for loop, isn't the time complexity O(n^2 )? 
The reason it is still O(n) is because the right pointer right can move n times and the left pointer left can move also n times in total. 
The inner loop is not running n times for each iteration of the outer loop. A sliding window guarantees a maximum of 2n window iterations.

Space complexity: O(1).

We are not using any extra space other than a few integer variables:left, right, sumOfCurrentWindow, and res, which takes up constant space each.
