class Solution {
    public int maxSubArray(int[] nums) {
        int maxsum = nums[0]
        for (int i = 0; i < nums.length; i++) {
            int currsum = 0;
            for (int j = i; j < nums.length; j++) {
                currsum += nums[j];
                maxsum = Math.max(maxsum, currsum);
            }
        }

        return maxSubarray;
    }
}

//O(n^2)

class Solution {
    public int maxSubArray(int[] nums) {
        int currsum = 0;
        int maxsum = nums[0];
        for(int i=0;i<nums.length;i++)
        {
            currsum = Math.max(0,currsum)+nums[i];//throw away negative value
            maxsum = Math.max(currsum,maxsum);
        }
        return maxsum;
    }
}

//O(n)
