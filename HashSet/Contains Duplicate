class Solution {
    public boolean containsDuplicate(int[] nums) {
        Set<Integer> set = new HashSet<>();
        for(int i=0;i<nums.length;i++)
        {
            if(!set.add(nums[i]))
            {
                return true;
            }
        }
        return false;
    }
}


or

public boolean containsDuplicate(int[] nums) {
    Set<Integer> set = new HashSet<>(nums.length);
    for (int x: nums) {
        if (set.contains(x)) return true;
        set.add(x);
    }
    return false;
}

Time complexity: O(n).
We do search() and insert() for n times and each operation takes constant time.

Space complexity: O(n).
The space used by a hash table is linear with the number of elements in it.
