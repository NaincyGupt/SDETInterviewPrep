class Solution {
    public boolean isAnagram(String s, String t) {
        //sort and check if both are same 
        //put in hashmap and check if both are same
        //frequency counter

        int[] counter = new int[26];
        if(s.length()!=t.length())
            return false;
        
        for(int i=0;i<s.length();i++)
        {   
            counter[s.charAt(i)-'a']++;
            counter[t.charAt(i)-'a']--;
        }

        for(int count: counter)
        {
            if(count!=0)
            {
                return false;
            }
        }
        return true;
    }
}

// Time complexity: O(n).
// Time complexity is O(n) because accessing the counter table is a constant time operation.

// Space complexity: O(1).
// Although we do use extra space, the space complexity is O(1) because the table's size stays constant no matter how large n is.
