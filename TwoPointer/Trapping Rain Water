class Solution {
    public int trap(int[] height) {

        int left = 0 , right = height.length-1;
        int ans = 0 , left_max = 0, right_max = 0;
        while(left<right)
        {
            if(height[left]< height[right]) //left block is lesser than right block 
            {
                left_max = Math.max(left_max, height[left]);
                ans = ans + (left_max - height[left]);
                left++;
            }
            else
            {
                right_max = Math.max(right_max, height[right]);
                ans = ans + (right_max - height[right]);
                right--;
            }
        }
        return ans;
    }
}

// Time complexity: O(n). Single iteration of O(n).
// Space complexity: O(1) extra space.
Algorithm
Initialize left pointer to 0 and right pointer to size-1
While left<right, do:
If height[left] is smaller than height[right]
If height[left]≥left_max, update left_max
Else add left_max−height[left] to ans
Add 1 to left.
Else
If height[right]≥right_max, update right_max
Else add right_max−height[right] to ans
Subtract 1 from right.
