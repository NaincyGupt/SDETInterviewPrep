class Solution {
     void swap(char[] chars, int x,int y)
    {
        char temp = chars[x];
        chars[x] = chars[y];
        chars[y]= temp;
    }

    boolean isVowel(char c)
    {
        return c == 'a' || c == 'i' || c == 'e' || c == 'o' || c == 'u'
            || c == 'A' || c == 'I' || c == 'E' || c == 'O' || c == 'U';
    }
    public String reverseVowels(String s) 
    {
       int left =0 , right = s.length()-1;
       char[] sChar = s.toCharArray();
         while (left < right) 
         {
            // Find the leftmost vowel
            while (left < s.length () && !isVowel(sChar[left])) 
            {
                left++;
            }
            // Find the rightmost vowel
            while (right >= 0 && !isVowel(sChar[right])) 
            {
                right--;
            }
            // Swap them if start is left of end
            if (left < right) 
            {
                swap(sChar, left++, right--);
            }
      
        }
          return new String(sChar);
    }
}

//Time complexity: O(N)

// It might be tempting to say that there are two nested loops and hence the complexity would be O(N^ 2). However, if we observe closely the pointers start and end will only traverse the index once

//Space complexity: O(N)
