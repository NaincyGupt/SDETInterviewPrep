class Solution {
  public static int[] search(int[] arr, int targetSum) {
    HashMap<Integer, Integer> map = new HashMap<>();
    //nums[i], index
    for(int i=0;i<arr.length;i++)
    {
      //if map contains target-nums[i] = return i and index of (target-nums[i] )
      if(map.containsKey(targetSum-arr[i]))
      {
        return new int[]{i,map.get(targetSum-arr[i])};
      }
      map.put(arr[i],i);
    }
    return new int[] { -1, -1 };
  }
}

Time complexity: O(n).
We traverse the list containing n elements exactly twice. Since the hash table reduces the lookup time to O(1), the overall time complexity is O(n).

Space complexity: O(n).
The extra space required depends on the number of items stored in the hash table, which stores exactly n elements.
